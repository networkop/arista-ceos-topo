#!/usr/bin/env python3
import argparse
import logging
import yaml
import os
import docker
import os.path
import netaddr
import ast

LOG = logging.getLogger(__name__)
DOCKER = docker.from_env()
CONF_DIR = './config'
PREFIX = 'CEOS-LAB'
CEOS_IMAGE = 'ceos:latest'
PUBLISH_BASE = 8000
OOB_PREFIX = '192.168.100.0/24'
DRIVER = 'bridge'
VERSION = 1

def parse_args():
    parser = argparse.ArgumentParser(description="Tool to create cEOS topologies")
    group = parser.add_mutually_exclusive_group()
    parser.add_argument(
        '-d', '--debug',
        help='Enable Debug',
        action='store_true'
    )
    group.add_argument(
        "--create",
        help="Create topology",
        action="store_true"
    )
    group.add_argument(
        "--destroy",
        help="Destroy topology",
        action="store_true"
    )
    parser.add_argument(
        "topology",
        help='Topology file',
        type=str
    )
    args = parser.parse_args()
    return args


def enable_lldp(networks):
    import subprocess
    for each in networks:
        try:
            cmd = 'echo 16384 > /sys/class/net/br-{}/bridge/group_fwd_mask'.format(each.network.id[:12])
            subprocess.call(cmd, shell=True)
        except:
            continue
    return


def kill_agetty():
    import subprocess
    cmd = 'pkill agetty'
    subprocess.call(cmd, shell=True)
    return

def parse_v1(t_yml):
    devices = dict()
    links = list()
    # Parsing links in the format ["Device-A:Interface-1", "Device-B:Interface-3"]
    # Or ["Device-A:Interface-1", "cvp-1", "host-1", "host-2:Eth1", "host-3:Eth2:192.168.10.30/24"]
    for idx, link_dsc in enumerate(t_yml['links']):
        if len(link_dsc) == 2:
            link = Link('p2p', 'net-{}'.format(idx))
        else:
            link = Link('mpoint', 'net-{}'.format(idx))
        links.append(link)
        for endpoint in link_dsc:
            ep = endpoint.split(':')
            if not ep:
                LOG.info('Link contains empty definition')
                return 1
            device_name = ep.pop(0)
            if 'cvp' in device_name.lower():
                device = devices.get(device_name, CVP(device_name))
                # Why are we hard-coding a subnet here? I forgot...
                # link.set_subnet('192.168.100.0/24')
            elif 'host' in device_name.lower():
                # Support for optional IP address parameter
                if len(ep) > 1:
                    # This means we have intf name AND IP address
                    ip = ep.pop()
                else:
                    ip = None
                device = devices.get(device_name, Host(device_name, ip))
            else:
                device = devices.get(device_name, CEOS(device_name))
            # Interface name can be optional
            if ep:
                int_name = ep.pop()
            else:
                # Note that this would result in an unpredictable connections
                # when multiple ports are connected to the same link
                # To avoid that explicitly specify interface name
                # As in "device:interface"
                int_name = 'eth{}'.format(idx)
            # Rememleber device connections
            device.connect(int_name, link)
            devices[device_name] = device
        return devices, links


def parse_v2(t_yml):
    devices = dict()
    links = list()
    for idx, link_dsc in enumerate(t_yml['links']):
        endpoints = ast.literal_eval(link_dsc.split(';')[0].split(':',1)[1])
        driver = link_dsc.split(';')[1]
        if 'macvlan' in driver.lower():
            macvlan = driver.split(':')
            int_name = macvlan[2][:-1].lower()
            driver = "macvlan" 
        elif 'bridge' in driver.lower():
            int_name = None
            if len(endpoints) == 2:
                driver = 'p2p'
            else:
                driver = 'mpoint'
        link = Link(driver, 'net-{}'.format(idx), int_name)
        links.append(link)
        for endpoint in endpoints:
            ep = endpoint.split(':')
            if not ep:
                LOG.info('Link contains empty definition')
                return 1
            device_name = ep.pop(0)
            if 'cvp' in device_name.lower():
                device = devices.get(device_name, CVP(device_name))
                # Why are we hard-coding a subnet here? I forgot...
                # link.set_subnet('192.168.100.0/24')
            elif 'host' in device_name.lower():
                # Support for optional IP address parameter
                if len(ep) > 1:
                    # This means we have intf name AND IP address
                    ip = ep.pop()
                else:
                    ip = None
                device = devices.get(device_name, Host(device_name, ip))
            else:
                device = devices.get(device_name, CEOS(device_name))
            # Interface name can be optional
            if ep:
                int_name = ep.pop()
            else:
                # Note that this would result in an unpredictable connections
                # when multiple ports are connected to the same link
                # To avoid that explicitly specify interface name
                # As in "device:interface"
                int_name = 'eth{}'.format(idx)
            # Remember device connections
            device.connect(int_name, link)
            devices[device_name] = device
    return devices, links


class Device(object):
    def __init__(self, name):
        LOG.debug('\tConstructing device {}'.format(name))
        self.name = name
        # Setting up defaults
        self.type = ''
        self.image = ''
        self.command = ''
        self.environment = dict()
        # Setting up extra variables
        self.interfaces = dict()
        self.volumes = dict()
        self.ports = dict()
        self.sequence = 0
        self.network = 'bridge'
        # Pointer to docker SDK object
        self.container = None

    def _get_or_create(self):
        LOG.debug('\tObtaining a pointer to container {}'.format(self.name))
        # Checking if container already exists
        self.container = self._get()
        # If doesn't exist creating a new container
        if not self.container:
            self.container = self._create()
        return

    def _create(self):
        return DOCKER.containers.create(
                self.image,
                command=self.command,
                environment=self.environment,
                volumes=self.volumes,
                network=self.network,
                privileged=True,
                name=self.name,
                detach=True,
                hostname=self.name,
                ports=self.ports,
                labels={PREFIX: self.name}
            )

    def _get(self):
        try:
            return DOCKER.containers.get(self.name)
        except docker.errors.NotFound:
            return None

    def start(self):
        LOG.debug('\tStarting container {}'.format(self.name))
        if not self.container:
            self._get_or_create()
        if self.container.status == 'running':
            LOG.info('Container {} already running'.format(self.name))
            return 1
        self._attach()
        self.container.start()
        return 0

    def connect(self, interface, link):
        LOG.debug('\tCreating a pointer to network {} for interface {}'.format(link.name, interface))
        self.interfaces[interface] = link
        return

    def _attach(self):
        for interface in sorted(self.interfaces):
            LOG.debug('\tAttaching container {} interface {} to its link'
                      .format(self.name, interface))
            link = self.interfaces[interface]
            link.connect(self.container)
        return

    def kill(self):
        LOG.debug('\tKilling container {}'.format(self.name))
        if not self.container:
            self._get_or_create()
        if self.container.status != 'running':
            LOG.info('Container {} is not running'.format(self.name))
            DOCKER.containers.prune(
                filters={'label': PREFIX}
            )
            return 1
        self.container.kill()
        return 0

class CEOS(Device):
    def __init__(self, name):
        super().__init__(name)
        # Overriding defaults
        self.type = 'ceos'
        self.image = CEOS_IMAGE
        self.command = "/sbin/init"
        self.environment = {
                               "CEOS": 1,
                               "EOS_PLATFORM": "ceossim",
                               "container": "docker",
                               "ETBA": 1,
                               "SKIP_ZEROTOUCH_BARRIER_IN_SYSDBINIT": 1,
                               "INTFTYPE": "eth"
                           }
        # Overriding extra variables
        self.volumes = self._get_config()

    def _get_config(self):
        startup = os.path.join(CONF_DIR, self.name)
        # Docker requires absolute path in volumes
        startup = os.path.abspath(startup)
        if os.path.isfile(startup):
            return {startup: {
                            'bind': "/mnt/flash/startup-config",
                            'mode': 'ro'}
                    }
        else:
            return {}

    def publish_port(self, inside, outside, proto='tcp'):
        self.ports['{}/{}'.format(inside, proto)] = outside


class Host(Device):
    def __init__(self, name, ip=None):
        super().__init__(name)
        # Overriding defaults
        self.type = 'host'
        self.image = 'alpine-host:latest'
        # If we have an IP, we pass it as a CMD (arg to an entrypoint script)
        if ip and self._verify_addr(ip):
            self.command = ip

    @staticmethod
    def _verify_addr(ip):
        prefix = netaddr.IPNetwork(ip)
        return prefix.prefixlen < 32

    def _create(self):
        # This code is to override the default behaviour of connecting
        # the first interface to the default docker bridge
        # We're pulling the first network name from the list of
        # interfaces (which may contain >1 elements)
        # and overriding the default network with this name
        int_name = next(iter(self.interfaces))
        first_link = self.interfaces.pop(int_name)
        self.network = first_link.name
        LOG.debug("\tMaking {} a default network for {}"
                  .format(self.network, self.name))
        if not first_link.network:
            LOG.debug("\tThe network must exist in order to create a host container. Checking if it exists")
            first_link.get_or_create()
        LOG.debug("\tThe remaining interfaces that will be connected before the start are {}"
                  .format(self.interfaces.keys()))
        return super()._create()


class CVP(Device):
    def __init__(self, name):
        super().__init__(name)
        # Overriding defaults
        self.type = 'cvp'
        self.image = 'cvp:latest'
        self.ports = {'443/tcp': 443}
        self.prefix = OOB_PREFIX
        self.command = self._get_ip_mask()

    def _get_ip_mask(self):
        prefix = netaddr.IPNetwork(self.prefix)
        # Giving CVP the last IP from the OOB subnet
        return [str(prefix[-2]), str(prefix.netmask)]


class Link(object):
    def __init__(self, link_type, name, int_name=None):
        if int_name:
            LOG.debug('\tConstructing a {} link with name {} using host interface {}'.format(link_type, name, int_name))
        else:
            LOG.debug('\tConstructing a {} link with name {}'.format(link_type, name))
        self.name = name
        self.link_type = link_type
        self.ipam = None
        self.interface = int_name
        self.network = None
        self.subnet = None
        if "macvlan" in link_type:
            self.driver = "macvlan"
        else:
            self.driver = "bridge"

    def get_or_create(self):
        LOG.debug('\tObtaining a pointer to network {}'.format(self.name))
        self.network = self._get()
        if not self.network:
            self.network = self._create()
        return

    def _create(self,):
        return DOCKER.networks.create(
                self.name,
                driver=self.driver,
                ipam=self.ipam,
                labels={PREFIX: self.name},
                options={'parent': self.interface}
            )

    def _get(self):
        LOG.debug("Trying to find an existing network with name {}".format(self.name))
        try:
            return DOCKER.networks.get(self.name)
        except docker.errors.NotFound:
            return None

    def connect(self, device,*args, **kwargs):
        LOG.debug('\tConnecting link to {}'.format(device.name))
        if not self.network:
            self.get_or_create()
        return self.network.connect(device, *args, **kwargs)


def main():
    # Initializing main variables
    global PREFIX, CEOS_IMAGE, CONF_DIR, PUBLISH_BASE, OOB_PREFIX, VERSION, DRIVER

    # Assigning arguments
    args = parse_args()
    debug = args.debug
    create = args.create
    t_file = os.path.join(os.getcwd(), args.topology)
    destroy = args.destroy
    PREFIX = args.topology.split('.')[0]

    # Logging settings
    if debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logging.basicConfig(level=log_level)

    # Loading topology YAML file
    with open(t_file, 'r') as stream:
        t_yml = yaml.load(stream)
    LOG.debug("Loaded topology from YAML file {}\n {}"
                 .format(t_file, yaml.dump(t_yml)))
    if 'links' not in t_yml:
        LOG.info('"link" dictionary is not found in {}'
                    .format(t_file))
        return 1

    # Loading optional variables
    # First check if it's specified in topoology.yml
    # Then check if it's an env variable, last accept default
    CONF_DIR = t_yml.get('CONF_DIR',os.getenv('CONF_DIR', CONF_DIR))
    PREFIX = t_yml.get('PREFIX', os.getenv('PREFIX', PREFIX))
    CEOS_IMAGE = t_yml.get('CEOS_IMAGE', os.getenv('CEOS_IMAGE', CEOS_IMAGE))
    PUBLISH_BASE = int(t_yml.get('PUBLISH_BASE', os.getenv('PUBLISH_BASE', PUBLISH_BASE)))
    OOB_PREFIX = t_yml.get('OOB_PREFIX',os.getenv('OOB_PREFIX', OOB_PREFIX))
    VERSION = int(t_yml.get('VERSION',os.getenv('VERSION', VERSION)))
    DRIVER = t_yml.get('DRIVER',os.getenv('DRIVER', DRIVER))

    # Versioned parsing logic
    if VERSION == 1:
        devices = parse_v1(t_yml)
    if VERSION == 2:
        devices = parse_v2(t_yml)

    # Publishing ports.
    if PUBLISH_BASE:
        print(devices)
        # Sort all device names alphabetically
        for idx,name in enumerate(sorted(devices.keys())):
            # Publish internal HTTPS port to external base
            # port offset by device's index (only for CEOS devices)
            if devices[name].type == 'ceos':
                devices[name].publish_port('443',PUBLISH_BASE+idx)

    # Main logic
    if create:
        started = [device.start() == 0 for (name, device) in devices.items()]
        if all(started):
            LOG.info('All devices started successfully')
            enable_lldp(links)
            return 0
        else:
            LOG.info('Devices have not been started')
            return 1
    if destroy:
        killed = [device.kill() == 0 for (name, device) in devices.items()]
        # Regardless of whether we killed or not, try to prune unused objects
        DOCKER.networks.prune(
            filters={'label': PREFIX}
        )
        DOCKER.containers.prune(
            filters={'label': PREFIX}
        )
        kill_agetty()
        if all(killed):
            LOG.info('All devices destroyed successfully')
            return 0
        else:
            LOG.info('Devices have not been destroyed')
            return 1


if __name__ == '__main__':
    main()
